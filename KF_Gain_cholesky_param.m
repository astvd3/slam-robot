function [W,W1]= KF_Gain_cholesky_param(P,R,H)
%function [W, W1]= KF_Gain_cholesky_param(R,H)
%
%INPUTS
% P - covariance matrix for robot position uncertainty, generated by
% odometry
% R - covariance matrix from the feature extraction
% H - Jacobian matrix for transforming features into same cooradinate frame
% as the one the robot position is measured in

%OUTPUTS
%W is the gain used to calculate the updated robot position, e.g.
%x\hat=x\hat+W*(zi-zj)
%
%W1 is the gain used to calculate the updated positoin covariance matrix,
%e.g.
%P\hat=P\hat-W2*W2'
%
% Calculate the KF (or EKF) gain using Cholesky factorisation, which
% is more numerically stable than a naive implementation.
%
 

PHt= P*H';
S= H*PHt + R;

S= (S+S')*0.5; % make symmetric
eps=.2;

SChol= chol(S+eps*eye(size(S)));

SCholInv= inv(SChol); % triangular matrix

W1= PHt * SCholInv;  %gain used to update the covariance matrix
W= W1 * SCholInv';   %gain used to update the robot position estimate